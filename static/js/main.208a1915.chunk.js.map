{"version":3,"sources":["components/Header/Header.module.css","components/Dialogs/Dialogs.module.css","components/Users/User.module.css","App.module.css","components/Sider/Sider.module.css","components/Main/Profile/Posts/Posts.module.css","components/Main/Profile/Profile.module.css","reportWebVitals.ts","components/Redux/PostsProfileReducer.ts","components/Redux/State.ts","components/Header/NavMenu/NavMenu.tsx","components/Header/Header.tsx","components/Sider/Sider.tsx","components/Footer/Footer.tsx","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/DialogsMessage/Message.tsx","components/Dialogs/Dialogs.tsx","components/Redux/MessageReducer.ts","components/Dialogs/DialogsContainer.tsx","components/Main/Profile/Posts/Posts.tsx","components/Main/Profile/ProfileContainer.tsx","components/Main/Profile/Profile.tsx","components/Redux/UsersReducer.ts","components/Users/UsersClass.tsx","components/Users/UsersContainer.tsx","App.tsx","components/Redux/redux-store.ts","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","newPostMessage","message","posts","id","name","img","likes","postsProfileReducer","state","action","stateCopy","type","newPost","Date","getTime","push","post","store","_State","dialogsPage","newMessage","dialogs","profilePage","sideBar","siderMenu","headerTopMenu","header","onChange","console","log","subscribe","callback","this","getState","dispatch","NavMenu","props","className","classes","headerItem__link","headerItem__href","href","Header","map","m","headerMain","to","imageMain","src","alt","headerItem","Sider","el","item__link","item__href","item","Footer","DialogsItem","dialogsLink","Message","Dialogs","dialogsBlock","dialogsItem","d","dialogsMessage","value","e","onChangeMessage","currentTarget","onClick","addMessage","DialogsContainer","connect","dispath","changeMessageAC","Post","postBlock","imageAvatar","ProfileContainer","addPost","onChangePost","text","infoBlock","localStorage","setItem","p","users","UsersClass","usersPage","length","axios","method","url","response","setUsers","data","items","container","blockAvatar","blockUserInfo","userName","blockInfoText","React","Component","UsersContainer","follow","userId","followAC","unfollow","unFollowAC","setUsersAC","App","Main","Container","ContentBlock","exact","path","render","rootReducer","combineReducers","u","followed","storeRedux","createStore","renderTree","ReactDOM","bind","document","getElementById"],"mappings":"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","file":"static/js/main.208a1915.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerMain\":\"Header_headerMain__2YE4j\",\"headerItem\":\"Header_headerItem__28ubK\",\"headerItem__link\":\"Header_headerItem__link__1zqlV\",\"headerItem__href\":\"Header_headerItem__href__3Pxuc\",\"imageMain\":\"Header_imageMain__B9xEM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"Dialogs_Dialogs__1zNzL\",\"dialogsBlock\":\"Dialogs_dialogsBlock__3Xlua\",\"dialogsItem\":\"Dialogs_dialogsItem__Mq21E\",\"dialogsLink\":\"Dialogs_dialogsLink__3xT3z\",\"dialogsMessage\":\"Dialogs_dialogsMessage__1OtQU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"User_container__2K3wD\",\"imageAvatar\":\"User_imageAvatar__1Dfso\",\"blockAvatar\":\"User_blockAvatar__27GQq\",\"blockInfoText\":\"User_blockInfoText__P917n\",\"blockUserInfo\":\"User_blockUserInfo__IvbOU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"App_Main__2OlMw\",\"Container\":\"App_Container__2Ukex\",\"ContentBlock\":\"App_ContentBlock__12Wct\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Sider_item__2u-2W\",\"item__link\":\"Sider_item__link__3vq_X\",\"item__href\":\"Sider_item__href__icVl8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageAvatar\":\"Posts_imageAvatar__3p2TM\",\"postBlock\":\"Posts_postBlock__1iJpJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoBlock\":\"Profile_infoBlock__1piiE\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {ActionType} from \"./State\";\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    img: string\r\n    message: string\r\n}\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n    likes: number\r\n}\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    newPostMessage: '',\r\n    message: [],\r\n    posts: [{id: 1, name: \"post1\", img: 'https://picsum.photos/200', likes: 1}],\r\n}\r\n\r\nexport type InitialStateType = {\r\n    newPostMessage: string\r\n    message: Array<MessageType>\r\n    posts: Array<PostsType>\r\n}\r\n\r\nexport const postsProfileReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n\r\n    const stateCopy = {...state}\r\n\r\n    switch (action.type) {\r\n        case 'ADD-POST' :\r\n            const newPost: PostsType = {\r\n                id: new Date().getTime(),\r\n                name: state.newPostMessage,\r\n                img: 'https://avavatar.ru/images/avatars/1/avatar_jV2wd3K7Xo6YegC2.jpg',\r\n                likes: 2,\r\n            }\r\n\r\n            stateCopy.posts.push(newPost)\r\n            stateCopy.newPostMessage = ''\r\n            return stateCopy\r\n\r\n\r\n        case 'CHANGE-POST' :\r\n            stateCopy.newPostMessage = action.post\r\n            return stateCopy\r\n\r\n        default: return stateCopy\r\n    }\r\n}\r\n\r\nexport type ActionsPostsReducerType =\r\n    | ReturnType<typeof changePostAC>\r\n    | ReturnType<typeof addPostAC>\r\n\r\n\r\nexport const addPostAC = () => {\r\n    return {\r\n        type: 'ADD-POST'\r\n    } as const\r\n}\r\n\r\nexport const changePostAC = (post: string) => {\r\n    return {\r\n        type: 'CHANGE-POST',\r\n        post\r\n    } as const\r\n}","import {ActionsMessageReducerType} from \"./MessageReducer\";\r\nimport {ActionsPostsReducerType, postsProfileReducer} from \"./PostsProfileReducer\";\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    img: string\r\n    message: string\r\n}\r\n\r\nexport type HeaderType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n    likes: number\r\n}\r\n\r\nexport type siderMenuType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    newMessage: string\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    newPostMessage: string\r\n    message: Array<MessageType>\r\n    posts: Array<PostsType>\r\n}\r\n\r\nexport type SideBarType = {\r\n    siderMenu: Array<siderMenuType>\r\n}\r\n\r\nexport type HeaderTopMenuType = {\r\n    header: Array<HeaderType>\r\n}\r\n\r\nexport type RootStateType = {\r\n    dialogsPage: DialogsPageType\r\n    profilePage: ProfilePageType\r\n    sideBar: SideBarType\r\n    headerTopMenu: HeaderTopMenuType\r\n}\r\n\r\nexport type StoreType = {\r\n    _State: RootStateType\r\n    onChange: (cb: any) => void\r\n    subscribe: (callback: () => void) => void\r\n    getState: () => RootStateType\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\nexport type ActionType = ActionsPostsReducerType | ActionsMessageReducerType\r\n\r\n\r\nexport const store: StoreType = {\r\n    _State: {\r\n        dialogsPage: {\r\n            newMessage: '',\r\n            dialogs: [\r\n                {id: 1, name: 'Pasha'},\r\n                {id: 2, name: 'Masha'},\r\n                {id: 3, name: 'Dima'},\r\n                {id: 4, name: 'Sasha'},\r\n            ],\r\n        },\r\n        profilePage: {\r\n            newPostMessage: '',\r\n            message: [\r\n                {id: 1, img: 'src', message: 'text1'},\r\n                {id: 2, img: 'src', message: 'text2'},\r\n                {id: 3, img: 'src', message: 'text3'}\r\n            ],\r\n            posts: [\r\n                {id: 1, name: \"post1\", img: 'https://picsum.photos/200', likes: 1},\r\n            ]\r\n        },\r\n        sideBar: {\r\n            siderMenu: [\r\n                {id: 1, name: 'Profile'},\r\n                {id: 2, name: 'Dialogs'},\r\n                {id: 3, name: 'Users'},\r\n                {id: 4, name: 'News'},\r\n                {id: 5, name: 'Music'},\r\n            ],\r\n        },\r\n        headerTopMenu: {\r\n            header: [\r\n                {id: 1, name: 'About us'},\r\n                {id: 2, name: 'Contacts'},\r\n                {id: 3, name: 'Map'}\r\n            ],\r\n        }\r\n\r\n    },\r\n    onChange() {\r\n        console.log('state Changed ')\r\n    },\r\n    subscribe(callback: any) {\r\n        this.onChange = callback\r\n    },\r\n    getState() {\r\n        return this._State\r\n    },\r\n    dispatch(action: ActionType) {\r\n\r\n       postsProfileReducer(this._State.profilePage, action)\r\n        // messageReducer(this._State.dialogsPage, action)\r\n        \r\n        this.onChange(this._State)\r\n\r\n    }\r\n}\r\n\r\nexport default store\r\n","import React from 'react'\r\nimport classes from \"../Header.module.css\";\r\n\r\ntype NavMenuType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const NavMenu: React.FC<NavMenuType> = (props) => {\r\n    return (\r\n        <>\r\n            <li className={classes.headerItem__link}><a className={classes.headerItem__href} href=\"\">{props.name}</a></li>\r\n        </>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport classes from './Header.module.css'\r\nimport {HeaderType} from \"../Redux/State\";\r\nimport {NavMenu} from \"./NavMenu/NavMenu\";\r\n\r\nexport type DialogPageTypes = {\r\n    header: Array<HeaderType>\r\n}\r\n\r\nconst Header: React.FC<DialogPageTypes> = (props) => {\r\n    const map = props.header.map((m) => {\r\n        return (<NavMenu key={m.id} id={m.id} name={m.name}/>)\r\n    })\r\n    return (\r\n        <header className={classes.headerMain}>\r\n\r\n            <NavLink to='/'><img className={classes.imageMain}\r\n                                 src=\"https://media.istockphoto.com/vectors/initial-letter-o-swoosh-orbit-logo-designs-vector-o-initial-logo-for-vector-id1256830588?k=20&m=1256830588&s=170667a&w=0&h=GmfquF0BgJwSJVlLRMQE8sTGo266tOP-Aoa5XewVHOo=\"\r\n                                 alt=\"logo\"/></NavLink>\r\n            <nav>\r\n                <ul className={classes.headerItem}>\r\n                    {map}\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport classes from './Sider.module.css'\r\nimport {siderMenuType} from \"../Redux/State\";\r\n\r\ntype SidersMenyTypes = {\r\n    siderMenu: Array<siderMenuType>\r\n}\r\n\r\nconst Sider: React.FC<SidersMenyTypes> = (props) => {\r\nconst map = props.siderMenu.map( (el) => {\r\n    return <li key={el.id} className={classes.item__link}><NavLink className={classes.item__href} to={el.name} >{el.name}</NavLink></li>\r\n} )\r\n    return (\r\n        <nav>\r\n            <ul className={classes.item}>\r\n                {map}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Sider","import React from 'react'\r\nimport classes from './Footer.module.css'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>Footer</footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from \"react\";\r\nimport classes from '../Dialogs.module.css'\r\n\r\ntype DialogsItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const DialogsItem: React.FC<DialogsItemType> = (props) => {\r\n\r\n    return (\r\n        <li className={classes.dialogsLink}>{props.name}</li>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\n\r\ntype MessageTypes = {\r\n    id: number\r\n    img: string\r\n    message: string\r\n}\r\n\r\n\r\nexport const Message: React.FC<MessageTypes> = (props) => {\r\n\r\n    return (\r\n        <div>{props.message}</div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport {DialogsItem} from './DialogsItem/DialogsItem';\r\nimport {Message} from \"./DialogsMessage/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.onChangeMessage(e.currentTarget.value);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Dialogs}>\r\n            <div className={classes.dialogsBlock}>\r\n                <ul className={classes.dialogsItem}>\r\n                    {props.dialogsPage.dialogs.map(d => <DialogsItem key={d.id} id={d.id} name={d.name}/>)}\r\n\r\n                </ul>\r\n                <div className={classes.dialogsMessage}>\r\n                    <div>\r\n                        {props.dialogsPage.message.map(m => <Message key={m.id} id={m.id} img={m.img} message={m.message}/>)}\r\n                        <textarea value={props.dialogsPage.newMessage} onChange={onChangeHandler} name=\"text\"/>\r\n                        <button onClick={props.addMessage}>send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import {ActionType, } from \"./State\";\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    img: string\r\n    message: string\r\n}\r\n\r\nconst initialState: InitialTypeDialogs = {\r\n    dialogs: [\r\n        {id: 1, name: 'Pasha'},\r\n        {id: 2, name: 'Masha'},\r\n        {id: 3, name: 'Dima'},\r\n        {id: 4, name: 'Sasha'},\r\n    ],\r\n    message: [\r\n        {id: 1, img: 'src', message: 'text1'},\r\n        {id: 2, img: 'src', message: 'text2'},\r\n        {id: 3, img: 'src', message: 'text3'},\r\n    ],\r\n    newMessage: ''\r\n}\r\n\r\nexport type InitialTypeDialogs = {\r\n    dialogs: Array<DialogsType>\r\n    message: Array<MessageType>\r\n    newMessage: string\r\n}\r\n\r\n\r\nexport const messageReducer = (state: InitialTypeDialogs = initialState, action: ActionType): InitialTypeDialogs => {\r\n\r\n    let stateCopy = {...state}\r\n\r\n    switch (action.type) {\r\n        case 'ADD-MESSAGE' :\r\n\r\n            const newMessage: MessageType = {\r\n                    id: new Date().getTime(),\r\n                    img: 'https://avavatar.ru/image/4399',\r\n                    message: stateCopy.newMessage\r\n            }\r\n\r\n            stateCopy.message.push(newMessage)\r\n            stateCopy.newMessage = ''\r\n                return stateCopy\r\n\r\n        case 'CHANGE-MESSAGE' :\r\n\r\n            stateCopy.newMessage = action.message\r\n\r\n            return stateCopy\r\n\r\n        default: return stateCopy\r\n        }\r\n    }\r\n\r\n\r\nexport type ActionsMessageReducerType =\r\n    | ReturnType<typeof addMessageAC>\r\n    | ReturnType<typeof changeMessageAC>\r\n\r\n\r\nexport const addMessageAC = () => {\r\n    return {\r\n        type: 'ADD-MESSAGE',\r\n    } as const\r\n}\r\n\r\nexport const changeMessageAC = (message: string) => {\r\n    return {\r\n        type: 'CHANGE-MESSAGE', message\r\n    } as const\r\n}","import React from 'react'\r\nimport Dialogs from \"./Dialogs\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {addMessageAC, changeMessageAC, InitialTypeDialogs} from \"../Redux/MessageReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateDialogsType = {\r\n    dialogsPage: InitialTypeDialogs\r\n}\r\n\r\ntype MapDispathDialogsType = {\r\n    addMessage: () => void\r\n    onChangeMessage: (message: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateDialogsType & MapDispathDialogsType\r\n\r\nconst mapStateDialogs = (state: AppStateType): MapStateDialogsType  => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispathDialogs = (dispath: Dispatch): MapDispathDialogsType  => {\r\n    return {\r\n        addMessage: () => {\r\n            dispath(addMessageAC())\r\n        },\r\n        onChangeMessage: (message: string) => {\r\n            dispath(changeMessageAC(message))\r\n        }\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = connect(mapStateDialogs,mapDispathDialogs) (Dialogs)\r\n\r\nexport default DialogsContainer","import React from 'react'\r\nimport classes from './Posts.module.css'\r\nimport {PostsType} from \"../../../Redux/State\";\r\n\r\ntype PostType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n    likes: number\r\n}\r\n\r\nconst Post = (props: PostsType) => {\r\n\r\n    return (\r\n    <>\r\n        <div>\r\n            <p>User</p>\r\n\r\n            <div className={classes.postBlock}>\r\n                <img className={classes.imageAvatar}\r\n                    src={props.img}/>\r\n                <p>{props.name}</p></div>\r\n            <span>likes {props.likes}</span>\r\n        </div>\r\n    </>\r\n)\r\n}\r\n\r\nexport default Post","import React from 'react'\r\nimport {addPostAC, changePostAC, InitialStateType} from \"../../Redux/PostsProfileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {Profile} from \"./Profile\";\r\n\r\ntype MapStateProfileType = {\r\n    profilePage: InitialStateType\r\n}\r\n\r\ntype MapDispatchProfile = {\r\n    addPost : () => void\r\n    onChangePost: (text: string) => void\r\n}\r\n\r\nexport type ProfileTypes = MapStateProfileType & MapDispatchProfile\r\n\r\n\r\nconst mapStateProfile = (state : AppStateType): MapStateProfileType  => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\nconst mapDispatchProfile = (dispath: Dispatch): MapDispatchProfile => {\r\n    return {\r\n        addPost : () => {\r\n            dispath(addPostAC())\r\n        },\r\n\r\n        onChangePost: (text: string) => {\r\n            dispath(changePostAC(text))\r\n        },\r\n\r\n    }\r\n}\r\n\r\nexport const ProfileContainer = connect(mapStateProfile,mapDispatchProfile) (Profile)\r\n\r\nexport default ProfileContainer","import React, {ChangeEvent} from 'react'\r\nimport Post from './Posts/Posts'\r\nimport classes from './Profile.module.css'\r\nimport {ProfileTypes} from \"./ProfileContainer\";\r\n\r\n\r\nexport const Profile = (props: ProfileTypes) => {\r\n\r\n    const addPost = () => {\r\n        props.addPost()\r\n        localStorage.setItem('value', props.profilePage.newPostMessage)\r\n    }\r\n\r\n    const onChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.onChangePost(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.infoBlock}>\r\n                <div>Avatar</div>\r\n            </div>\r\n\r\n            <div>\r\n                My posts\r\n                <div>\r\n                    <textarea value={props.profilePage.newPostMessage} onChange={onChange} name=\"textPost\"/>\r\n                    <button onClick={addPost}>опубликовать</button>\r\n                </div>\r\n                {props.profilePage.posts.map(p => <Post key={p.id} id={p.id} name={p.name} img={p.img} likes={p.likes}/>)}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","type LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\ntype UsersType = {\r\n    id: number\r\n    followed: boolean\r\n    userName: string\r\n    status: string\r\n    location: LocationType\r\n    text: string\r\n}\r\n\r\nexport type UsersReducerType = {\r\n    users:Array<UsersType>\r\n}\r\n\r\nconst initialState = {\r\n    users: [\r\n        // {id: 1,followed:true, userName: 'Dimych', status:'main teacher', location: {city: 'Minsk', country:\"Belarus\"}, text:'some text'},\r\n        // {id: 2,followed:false, userName: 'Vica', status:'security', location: {city: 'Moscow', country:\"Russia\"}, text:'hello'},\r\n        // {id: 3,followed:true, userName: 'Pasha', status:'advanced', location: {city: 'Astana', country:\"Kazhahstan\"}, text:'anything'}\r\n        ]\r\n}\r\n\r\n\r\nexport const usersReducer = (state:  UsersReducerType = initialState, action: ActionType): UsersReducerType => {\r\n\r\n    switch (action.type) {\r\n        case 'FOLLOW' : {\r\n            return {...state,\r\n                users: state.users.map((u) => u.id === action.userId ? {...u,followed: true} : u)\r\n            }\r\n        }\r\n\r\n        case 'UNFOLLOW' : {\r\n            return {...state,\r\n                users: state.users.map(u => {\r\n                        if (u.id === action.userId) {\r\n                            return {...u, followed: false}\r\n                        }\r\n                        return u\r\n                    }\r\n                )\r\n            }\r\n        }\r\n\r\n        case 'SET_USERS': {\r\n            return{\r\n                ...state,\r\n                users: [...state.users, ...action.users]\r\n            }\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\ntype ActionType =\r\n    | ReturnType<typeof followAC >\r\n    | ReturnType<typeof unFollowAC >\r\n    | ReturnType<typeof setUsersAC >\r\n\r\nexport const followAC = (userId: number) => {\r\n    return {\r\n        type: 'FOLLOW',\r\n        userId\r\n\r\n    }as const\r\n}\r\n\r\nexport const unFollowAC = (userId: number) => {\r\n    return {\r\n        type: 'UNFOLLOW',\r\n        userId\r\n\r\n    }as const\r\n}\r\n\r\nexport const setUsersAC = (users: Array<UsersType>) => {\r\n    return {\r\n        type: 'SET_USERS',\r\n        users\r\n\r\n    }as const\r\n}","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport classes from \"./User.module.css\";\r\nimport {UsersPropsType} from \"./UsersContainer\";\r\n\r\nexport class UsersClass extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount (){\r\n        if (this.props.usersPage.users.length === 0) {\r\n            axios({\r\n                method: 'get',\r\n                url: 'https://social-network.samuraijs.com/api/1.0/users',\r\n            })\r\n                .then((response) => {\r\n                    this.props.setUsers(response.data.items)\r\n                });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n\r\n            {this.props.usersPage.users.map(users => {\r\n                return <div className={classes.container}>\r\n                    <div className={classes.blockAvatar}>\r\n                        <img className={classes.imageAvatar}\r\n                             src={users.text}\r\n                             alt=\"avatar\"/>\r\n                        <button>follow</button>\r\n                    </div>\r\n                    <div className={classes.blockUserInfo}>\r\n                        <div>\r\n                            <div>\r\n                                <div>\r\n                                    {users.userName}\r\n                                </div>\r\n                            </div>\r\n                            <div className={classes.blockInfoText}>\r\n                                {users.text}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <div>{\"users.location.country\"}</div>\r\n                            <div>{\"users.location.city\"}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            })}\r\n        </div>\r\n\r\n    }\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {followAC, setUsersAC, unFollowAC, UsersReducerType} from \"../Redux/UsersReducer\";\r\nimport {UsersClass} from \"./UsersClass\";\r\n\r\ntype MapStateUsersType = {\r\n    usersPage: UsersReducerType\r\n}\r\n\r\ntype MapDispathUsersType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (user: Array<UsersType>) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateUsersType & MapDispathUsersType\r\n\r\nconst mapStateUsers = (state: AppStateType): MapStateUsersType => {\r\n    return {\r\n        usersPage: state.usersPage\r\n    }\r\n}\r\n\r\nconst mapDispatchUsers = (dispatch: Dispatch): MapDispathUsersType => {\r\n    return {\r\n        follow: (userId: number) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId: number) => {\r\n            dispatch(unFollowAC(userId))\r\n        },\r\n        setUsers: (users: Array<UsersType>) => {\r\n            dispatch(setUsersAC(users))\r\n        }\r\n    }\r\n}\r\n\r\ntype LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\ntype UsersType = {\r\n    id: number\r\n    followed: boolean\r\n    userName: string\r\n    status: string\r\n    location: LocationType\r\n    text: string\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateUsers,mapDispatchUsers)(UsersClass)\r\n\r\nexport default UsersContainer","import React, {Dispatch} from 'react';\r\nimport classes from './App.module.css';\r\nimport Header from './components/Header/Header';\r\nimport Sider from './components/Sider/Sider';\r\nimport Footer from './components/Footer/Footer';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport {ActionType, DialogsPageType, HeaderTopMenuType, ProfilePageType, SideBarType} from \"./components/Redux/State\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport ProfileContainer from \"./components/Main/Profile/ProfileContainer\";\r\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\r\n\r\ntype RootStatesType = {\r\n    dialogsPage: DialogsPageType\r\n    dispatch: Dispatch<ActionType>\r\n    profilePage: ProfilePageType\r\n    sideBar: SideBarType\r\n    headerTopMenu: HeaderTopMenuType\r\n}\r\n\r\nfunction App(props: RootStatesType) {\r\n    return (\r\n        <Switch>\r\n            <div className={classes.Main}>\r\n                <div className={classes.Container}>\r\n                    <Header header={props.headerTopMenu.header}/>\r\n                    <div className={classes.ContentBlock}>\r\n                        <Sider siderMenu={props.sideBar.siderMenu}/>\r\n\r\n                        <Route exact path={['/', '/profile']} render={() => {\r\n                            return (\r\n                                <ProfileContainer />\r\n                            )\r\n                        }}/>\r\n                        <Route exact path='/dialogs' render={() => {\r\n                            return (\r\n                                <DialogsContainer />\r\n                            )\r\n                        }}/>\r\n                        <Route exact path='/users' render = {() => {\r\n                            return (\r\n                                <UsersContainer />\r\n                            )\r\n                        }} />\r\n                    </div>\r\n                    <Footer/>\r\n                </div>\r\n            </div>\r\n        </Switch>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {postsProfileReducer} from \"./PostsProfileReducer\";\r\nimport {messageReducer} from \"./MessageReducer\";\r\nimport {usersReducer} from \"./UsersReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: postsProfileReducer,\r\n    dialogsPage: messageReducer,\r\n    usersPage: usersReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nexport const storeRedux = createStore(rootReducer)\r\n\r\nexport default storeRedux","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store, {RootStateType} from \"./components/Redux/State\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport {Provider} from 'react-redux';\r\nimport {storeRedux} from \"./components/Redux/redux-store\";\r\n\r\nexport const renderTree = (state: RootStateType) => {\r\n    ReactDOM.render(\r\n        <BrowserRouter>\r\n            <Provider store={storeRedux}>\r\n                <App sideBar={state.sideBar}\r\n                     profilePage={state.profilePage}\r\n                     headerTopMenu={state.headerTopMenu}\r\n                     dialogsPage={state.dialogsPage}\r\n                     dispatch={store.dispatch.bind(store)}\r\n                />\r\n            </Provider>\r\n        </BrowserRouter>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\nrenderTree(store.getState())\r\n// @ts-ignore\r\nstore.subscribe(() => {\r\n    let state = store.getState();\r\n    renderTree(state)\r\n})\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}